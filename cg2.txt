import javax.swing.*;
import java.awt.*;
import java.awt.event.*;


public class IT2153P2020 extends JFrame implements MouseListener{
    Graphics g;
    int x1,y1;;
    double[][] coordinates;

    IT2153P2020(){
        setTitle("Final");
        setSize(800,800);
        setVisible(true);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        addMouseListener(this);
        g=getGraphics();

        coordinates = new double[3][3];
    }

    void drawAxis(){
        g.setColor(Color.black);
        g.drawLine(400,0,400,800);
        g.drawLine(0,400,800,400);
    }

   
	public void Bresenham(int x1,int y1,int x2,int y2)
	{
		int dx,dy,d,x,y,xend,d4mG1,yend;
		dx=Math.abs(x2-x1);
		dy=Math.abs(y2-y1);
		
		d=2*dy-dx;
		
		if(dy<=dx)
		{
			if(x1>x2)
			{
				if(y1>y2)
				{
					x=x2; y=y2; xend=x1;
					g.drawLine(x,y,x,y);
					for(int i=x+1;i<=xend;i++)
					{
						if(d<0)
							d=d+2*dy;
						else{
							y=y+1;
							d=d+2*(dy-dx);							
						}
						g.drawLine(i,y,i,y);
					}
				}
				else
				{
					x=x2; y=y2; xend=x1;
					g.drawLine(x,y,x,y);
					for(int i=x+1;i<=xend;i++)
					{
						if(d<0)
							d=d+2*dy;
						else
						{
							y=y-1;
							d=d+2*(dy-dx);							
						}
						g.drawLine(i,y,i,y);
					}
				}			
			}
			else
			{
				if(y1>y2)
				{
					x=x1; y=y1; xend=x2;
					g.drawLine(x,y,x,y);
					for(int i=x+1;i<=xend;i++)
					{
						if(d<0)
							d=d+2*dy;
						else
						{
							y=y-1;
							d=d+2*(dy-dx);							
						}
						g.drawLine(i,y,i,y);
					}
				}
				else
				{
					x=x1; y=y1; xend=x2;
					g.drawLine(x,y,x,y);
					for(int i=x+1;i<=xend;i++)
					{
						if(d<0)
							d=d+2*dy;
						else
						{
							y=y+1;
							d=d+2*(dy-dx);							
						}
						g.drawLine(i,y,i,y);
					}
				}				
			}		
		}
		else
		{
			//System.out.println("Slope is greater than one");
			d4mG1=2*dx-dy;
			if(y1>y2)
			{
				if(x1>x2)
				{
					x=x2; y=y2; yend=y1;
					g.drawLine(x,y,x,y);
					for(int j=y+1; j<=yend;j++)
					{
						if(d4mG1<0)
							d4mG1=d4mG1+2*dx;
						else
						{
							x=x+1;
							d4mG1=d4mG1+2*(dx-dy);
						}
						g.drawLine(x,j,x,j);
					}
				}
				else
				{
					x=x2; y=y2; yend=y1;
					g.drawLine(x,y,x,y);
					for(int j=y+1; j<=yend;j++)
					{
						if(d4mG1<0)
							d4mG1=d4mG1+2*dx;
						else
						{
							x=x-1;
							d4mG1=d4mG1+2*(dx-dy);
						}
						g.drawLine(x,j,x,j);
					}
				}				
			}
			else
			{
				if(x1>x2)
				{
					x=x1; y=y1; yend=y2;
					g.drawLine(x,y,x,y);
					for(int j=y+1; j<=yend;j++)
					{
						if(d4mG1<0)
							d4mG1=d4mG1+2*dx;
						else
						{
							x=x-1;
							d4mG1=d4mG1+2*(dx-dy);
						}
						g.drawLine(x,j,x,j);
					}
				}
				else
				{
					x=x1; y=y1; yend=y2;
					g.drawLine(x,y,x,y);
					for(int j=y+1; j<=yend;j++)
					{
						if(d4mG1<0)
							d4mG1=d4mG1+2*dx;
						else
						{
							x=x+1;
							d4mG1=d4mG1+2*(dx-dy);
						}
						g.drawLine(x,j,x,j);
					}
				}				
			}
		}		
	}
	
	public void ica(int Xc,int Yc,int r){                    
		int x=0, y=r, d=3-2*r;
		while(x<=y){
			plotCircle(Xc,Yc,x,y);
			if(d<0)
				d=d+4*x+6;
			else{
				d=d+4*(x-y)+10;
				y--;
			}
			x++;
		}			
	}                                                                    
	
	public void plotCircle(int h,int k,int x,int y){                  
		g.drawLine(h+x,k+y,h+x,k+y);
		g.drawLine(h+y,k+x,h+y,k+x);
		g.drawLine(h-y,k+x,h-y,k+x);
		g.drawLine(h-x,k+y,h-x,k+y);
		
		g.drawLine(h-x,k-y,h-x,k-y);
		g.drawLine(h-y,k-x,h-y,k-x);
		g.drawLine(h+y,k-x,h+y,k-x);
		g.drawLine(h+x,k-y,h+x,k-y);		                         
	}
	
	void drawObject1(double[][] point){
		ica((int)coordinates[0][0],(int)coordinates[1][0]+200,200);
		ica((int)coordinates[0][0],(int)coordinates[1][0]+200,100);
	}

    void drawObject(double[][] point){
       // g.setColor(Color.blue);
        Bresenham((int)coordinates[0][0],(int)coordinates[1][0],(int)coordinates[0][1],(int)coordinates[1][1]);
        Bresenham((int)coordinates[0][1],(int)coordinates[1][1],(int)coordinates[0][2],(int)coordinates[1][2]);
        Bresenham((int)coordinates[0][2],(int)coordinates[1][2],(int)coordinates[0][0],(int)coordinates[1][0]);
		
		Bresenham((int)coordinates[0][0]+200,(int)coordinates[1][0]+200,(int)coordinates[0][1]+200,(int)coordinates[1][1]+200);
        Bresenham((int)coordinates[0][1]+200,(int)coordinates[1][1]+200,(int)coordinates[0][2]+200,(int)coordinates[1][2]+200);
        Bresenham((int)coordinates[0][2]+200,(int)coordinates[1][2]+200,(int)coordinates[0][0]+200,(int)coordinates[1][0]+200);
		
		Bresenham((int)coordinates[0][0],(int)coordinates[1][0]+400,(int)coordinates[0][1],(int)coordinates[1][1]+400);
        Bresenham((int)coordinates[0][1],(int)coordinates[1][1]+400,(int)coordinates[0][2],(int)coordinates[1][2]+400);
        Bresenham((int)coordinates[0][2],(int)coordinates[1][2]+400,(int)coordinates[0][0],(int)coordinates[1][0]+400);
		
		Bresenham((int)coordinates[0][0]-200,(int)coordinates[1][0]+200,(int)coordinates[0][1]-200,(int)coordinates[1][1]+200);
        Bresenham((int)coordinates[0][1]-200,(int)coordinates[1][1]+200,(int)coordinates[0][2]-200,(int)coordinates[1][2]+200);
        Bresenham((int)coordinates[0][2]-200,(int)coordinates[1][2]+200,(int)coordinates[0][0]-200,(int)coordinates[1][0]+200);
    
	}
	

    double[][] multipleMatrix(double[][] x,double[][] y){
        double ans[][] = new double[x.length][y[0].length];

        for(int i=0;i<x.length;i++){
            for(int k=0;k<y[0].length;k++){
                ans[i][k]=0;
                for(int j=0;j<x[0].length;j++){
                    ans[i][k] += x[i][j] * y[j][k]; 
                }
            }
        }

        return ans;
    }

    double[][] translateMatrix(double dx,double dy){
        double a[][] = {{1,0,dx},{0,1,dy},{0,0,1}};
        return a;
    }

    void translate(){
        double[][] t = new double[3][3];
        t = translateMatrix(100,100);

        coordinates = multipleMatrix(t, coordinates);
        drawObject(coordinates);
    }

    double[][] scaleMatrix(double sx,double sy){
        double a[][] = {{sx,0,0},{0,sy,0},{0,0,1}};
        return a;
    }

    void scale(){
        double[][] t1 = new double[3][3];
        double[][] s = new double[3][3];
        double[][] t2 = new double[3][3];
        double[][] tfinal = new double[3][3];

        t1 = translateMatrix(-x1, -y1);
        s = scaleMatrix(0.5,0.5);
        t2 = translateMatrix(x1, y1);

        tfinal = multipleMatrix(s,t1);
        tfinal = multipleMatrix(t2, tfinal);

        coordinates = multipleMatrix(tfinal, coordinates);
        drawObject(coordinates);
		

    }

    double[][] reflectionXMatrix(){
        double a[][] = {{1,0,0},{0,-1,0},{0,0,1}}; 
        return a;
    }

    double[][] reflectionYMatrix(){
        double a[][] = {{-1,0,0},{0,1,0},{0,0,1}};
        return a;
    }

    void reflectX(){
        double[][] t1 = new double[3][3];
        double[][] rx = new double[3][3];
        double[][] t2 = new double[3][3];
        double[][] tfinal = new double[3][3];
        
        t1 = translateMatrix(0,-y1);
        rx = reflectionXMatrix();
        t2 = translateMatrix(0,y1);

        tfinal = multipleMatrix(rx,t1);
        tfinal = multipleMatrix(t2,tfinal);

        coordinates = multipleMatrix(tfinal,coordinates);
        drawObject(coordinates);
    }

    void reflectY(){
        double[][] t1 = new double[3][3];
        double[][] ry = new double[3][3];
        double[][] t2 = new double[3][3];
        double[][] tfinal = new double[3][3];

        t1 = translateMatrix(-x1, 0);
        ry =reflectionYMatrix();
        t2 = translateMatrix(x1, 0);

        tfinal = multipleMatrix(ry, t1);
        tfinal = multipleMatrix(t2,tfinal);

        coordinates = multipleMatrix(tfinal,coordinates);
        drawObject(coordinates);
    }

    double[][] rotateMatrix(double angle){
        double teta = Math.toRadians(angle);
        double a[][] = {{Math.cos(teta),-1*Math.sin(teta),0},{Math.sin(teta),Math.cos(teta),0},{0,0,1}};
        return a;
    }

    void rotate(){
        double[][] t1 = new double[3][3];
        double[][] ro = new double[3][3];
        double[][] t2 = new double[3][3];
        double[][] tfinal = new double[3][3];

        t1 = translateMatrix(-x1,-y1);
        ro = rotateMatrix(60.0);
        t2 = translateMatrix(x1,y1);

        tfinal = multipleMatrix(ro,t1);
        tfinal = multipleMatrix(t2,tfinal);

        coordinates = multipleMatrix(tfinal,coordinates);
        drawObject(coordinates);

    }

    void big(){
        coordinates[0][0]=x1;
        coordinates[1][0]=y1;
        coordinates[2][0]=1;

        coordinates[0][1]=x1+100;
        coordinates[1][1]=y1;
        coordinates[2][1]=1;

        coordinates[0][2]=x1+25;
        coordinates[1][2]=y1-25;
        coordinates[2][2]=1;

        g.setColor(Color.blue);
        drawObject(coordinates);

        rotate();
        rotate();
        rotate();
		rotate();
		rotate();
        reflectY();
        rotate();
        rotate();
        rotate();
		rotate();
		rotate();
		
		g.setColor(Color.black);
		drawObject1(coordinates);
		


    }

    void small(){
        coordinates[0][0]=x1;
        coordinates[1][0]=y1;
        coordinates[2][0]=1;

        coordinates[0][1]=x1+100;
        coordinates[1][1]=y1;
        coordinates[2][1]=1;

        coordinates[0][2]=x1+25;
        coordinates[1][2]=y1-25;
        coordinates[2][2]=1;
        
        //scale();
        g.setColor(Color.red);
        scale();
        drawObject(coordinates);
        
        

        rotate();
        rotate();
        rotate();
		rotate();
		rotate();
        reflectY();
		rotate();
        rotate();
        rotate();
		rotate();
		rotate();
    }



    public void mouseClicked(MouseEvent me){
        x1 = me.getX();
        y1=me.getY();
        big();
        small();
    }
    public void mousePressed(MouseEvent me){}
    public void mouseReleased(MouseEvent me){}
    public void mouseEntered(MouseEvent me){
        //drawAxis();
    }
    public void mouseExited(MouseEvent me){}
    public void mouseDragged(MouseEvent me){}

    public static void main(String[] args) {
        IT2153P2020 obj = new IT2153P2020();
    }

}
    
    
    
    
    
    

