--------------------------------------------------------------------------
word(p,r,o,l,o,g).
word(s,e,r,v,e,r).
word(o,n,l,i,n,e).
word(m,e,m,o,r,y).
word(l,i,n,u,x).
word(p,i,x,e,l).
word(e,m,a,c,s).
word(j,a,v,a).
word(d,a,t,a).
word(p,e,r,l).
word(d,v,d).
word(w,e,b).
word(n,f,s).
word(g,n,u).
word(x,m,l).
word(r,o,m).
word(m,a,c).
word(s,q,l).

go(L1,L2,L3,L4,L5,L6,L7,L8,L9,L10,L11,L12,L13,L14,L15,L16,L17,L18):-
    word(L1,L3,L5,L4,L5,L6),
    word(L1,L2,L3,L4),
    word(L5,L7,L4,L8,L7,L2),
    word(L9,L2,L10),
    word(L6,L7,L11),
    word(L4,L8,L7,L11,L12),
    word(L7,L15,L16),
    word(L12,L13,L4),
    word(L16,L17,L4),
    word(L13,L14,L18),
    word(L2,L13,L14,L18,L16).

-----------------------------------------------------------------------------------------------------

initial_state([left, man, fox, goose, beans]).
final_state([right, man, fox, goose, beans]).


valid_state([_, _, _, _, _]).
valid_state([left, man, _, Y, Y]) :-
    \+ Y = man.
valid_state([right, man, _, Y, Y]) :-
    \+ Y = man.


move([left|Rest], [right|Rest]).
move([right|Rest], [left|Rest]).
move([Side, Side, Side, Y, Z], [Opposite, Opposite, Opposite, Y, Z]) :-
    opposite(Side, Opposite).


opposite(left, right).
opposite(right, left).


solution(State, State, []).
solution(State, FinalState, [Move|RestPath]) :-
    move(State, NextState),
    valid_state(NextState),
    solution(NextState, FinalState, RestPath).


find_solution(Path) :-
    initial_state(InitialState),
    final_state(FinalState),
    solution(InitialState, FinalState, Path).
-------------------------------------------------------------------------------------------------------
initial_state([left, [adam, lisa, bob, jenny, charlie, mary]]).
final_state([right, []]).

valid_state([_, People]) :-
    \+ conflicting(People).


conflicting([]).
conflicting([Man, Wife|Rest]) :-
    member(OtherMan, Rest),
    member(OtherWife, Rest),
    (Man = OtherMan ; Man = OtherWife),
    (Wife = OtherMan ; Wife = OtherWife),
    conflicting(Rest).


move([left, Left], [right, Right]) :-
    select_two(P1, P2, Left, Rest),
    append(Rest, [P1, P2], Right),
    valid_state([right, Right]).
move([right, Right], [left, Left]) :-
    select_two(P1, P2, Right, Rest),
    append(Rest, [P1, P2], Left),
    valid_state([left, Left]).


select_two(X, Y, List, Rest) :-
    select(X, List, Rest1),
    select(Y, Rest1, Rest).


solution(State, State, []).
solution(State, FinalState, [Move|RestPath]) :-
    move(State, NextState),
    solution(NextState, FinalState, RestPath).


find_solution(Path) :-
    initial_state(InitialState),
    final_state(FinalState),
    solution(InitialState, FinalState, Path).
