def knapsack(weights, values, capacity):
    n = len(weights)
    dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)]

    for i in range(1, n + 1):
        for w in range(1, capacity + 1):
            if weights[i-1] <= w:
                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])
            else:
                dp[i][w] = dp[i-1][w]

    # Backtrack to find the selected items
    w = capacity
    selected_items = []
    for i in range(n, 0, -1):
        if dp[i][w] != dp[i-1][w]:
            selected_items.append(i)
            w -= weights[i-1]

    return dp[n][capacity], selected_items

# Package data
weights = [12, 15, 30, 25, 40, 50, 35, 45, 20, 10]
values = [600, 1000, 1200, 2000, 1500, 800, 900, 1100, 500, 1300]
capacity = 150

# Call the function
max_value, selected_items = knapsack(weights, values, capacity)
print("Maximum Value:", max_value)
print("Selected Packages:", selected_items)


_______________________________

import matplotlib.pyplot as plt

# Sample locations for selected items (assuming the map is 2D)
locations = {
    1: (2, 3), 2: (5, 8), 3: (6, 2), 4: (7, 5), 5: (4, 7),
    6: (3, 6), 7: (1, 8), 8: (9, 4), 9: (7, 1), 10: (8, 9)
}

# Plot the selected items on the map
for item in selected_items:
    plt.scatter(*locations[item], label=f'Package {item}')
    plt.text(*locations[item], f'{item}', fontsize=12, ha='right')

plt.title('Selected Package Locations')
plt.xlabel('X Coordinate')
plt.ylabel('Y Coordinate')
plt.legend()
plt.grid(True)
plt.show()

_______________________________


from math import sqrt

warehouse_location = (0, 0)

def distance(p1, p2):
    return sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)

# Sort selected items based on their distance from the warehouse
selected_items.sort(key=lambda item: distance(warehouse_location, locations[item]))

print("Order of Delivery:", selected_items)

_______________________________

def calculate_score(S):
    vowels = set('aeiou')
    alice_score = 0
    bob_score = 0
    
    for i in range(len(S)):
        if S[i] in vowels:
            alice_score += len(S) - i
        else:
            bob_score += len(S) - i
    
    if alice_score > bob_score:
        return "Alice", alice_score
    elif bob_score > alice_score:
        return "Bob", bob_score
    else:
        return "Draw", alice_score

# Example input
S = "banana"
winner, score = calculate_score(S)
print("Winner:", winner)
print("Score:", score)
