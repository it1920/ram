#include <mpi.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <iostream>

int main() {
	int np;
	int pid;

	MPI_Init(NULL, NULL);
	MPI_Comm_size(MPI_COMM_WORLD, &np);
	MPI_Comm_rank(MPI_COMM_WORLD, &pid);
	MPI_Status sta;

	if (np != 4) {
		if (pid == 0) {
			printf("Error:System Should have 4 processors!");
		}
		MPI_Finalize();
		return 1;
	}

	if (pid == 0) {
		int receiveA[1][4];
		int localC[1][4] = {};
		int FinalResultC[4][4] = {};

		int matrixA[4][4] = {
			{2,1,7,5},
			{1,1,8,7},
			{0,1,3,1},
			{3,9,3,2}
		};

		int matrixB[4][4] = {
			{3, 5, 9, 7},
			{0, 2, 2, 5},
			{1, 8, 9, 2},
			{1, 2, 9, 7}
		};

		MPI_Scatter(&matrixA, 4, MPI_INT, &receiveA, 4, MPI_INT, 0, MPI_COMM_WORLD);
		MPI_Bcast(&matrixB, 16, MPI_INT, 0, MPI_COMM_WORLD);

		printf("My PID :%d and I'm Receiving", pid);


		//Performing Matrix Multiplication
		for (int i = 0; i < 1; i++) {
			for (int j = 0; j < 4; j++) {
				localC[i][j] = 0;
				for (int k = 0; k < 4; k++) {
					localC[i][j] += receiveA[i][k] * matrixB[k][j];
				}

			}
		}

		//Printing Results
		for (int i = 0; i < 4; i++) {
			printf("%d ", localC[0][i]);
		}

		//collecting results by pid=0
		MPI_Gather(&localC, 4, MPI_INT, &FinalResultC, 4, MPI_INT, 0, MPI_COMM_WORLD);

		//Final Answer
		printf("\n");
		if (pid == 0) {
			printf("Resultant Matrix\n\n");
			//printing final resultant matrix
			for (int i = 0; i < 4; i++) {
				for (int j = 0; j < 4; j++) {
					printf("%d", FinalResultC[i][j]);
				}
				printf("\n");
			}
		}
	}

	MPI_Finalize();
	return 0;

}
