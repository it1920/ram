item(pc,50000,25).
item(laptop,75000,35).
item(mouse,750,42).
item(keyboard,500,42).

split([],[],[]).
split([H|T],[H|L1],L2):-split(T,L1,L2).

check_availability(Item, Quantity) :-
    item(Item, _, AvailableQuantity),
    (   AvailableQuantity >= Quantity
    ->  write('Available'), nl
    ;   write('Not Available'), nl
    ).


print_prices([]).
print_prices([Item|T]) :-
    item(Item, Price, _),
    write(Item), write(': '),
    write(Price), nl, print_prices(T).


compute_total_price([], 0).
compute_total_price([Item, Qty | Rest], Total) :-
    item(Item, Price, _),
    ItemTotal is Price * Qty,
    compute_total_price(Rest, SubTotal),
    Total is SubTotal + ItemTotal.

discount(Total, Discount) :-
    (   Total >= 50000, Total =< 99999
    ->  Discount is 0.05
    ;   Total >= 100000, Total =< 199999
    ->  Discount is 0.1
    ;   Total >= 200000, Total =< 299999
    ->  Discount is 0.15
    ;   Total > 300000
    ->  Discount is 0.2
    ;   Discount is 0
    ).
payable_amount(Item, Payable) :-
    compute_total_price(Item, Total),
    discount(Total, DiscountPercent),
    Discount is Total * DiscountPercent,
    Payable is Total - Discount.


------------------------------------------------------------------------------------------------------------------------------------


initial_state(state(east,east,east,east)).
goal_state(state(west,west,west,west)).

unsafe(state(B,A,A,_)):-notequal(A,B).
unsafe(state(B,A,_,A)):-notequal(A,B).

notequal(east,west).
notequal(west,east).

write_action(move1(P1,P2)):-write('Farmer goes with goat from '),write(P1),write(' to '),write(P2),nl.
write_action(move2(P1,P2)):-write('Farmer goes alone from '),write(P1),write(' to '),write(P2),nl.
write_action(move3(P1,P2)):-write('Farmer goes with wolf from '),write(P1),write(' to '),write(P2),nl.
write_action(move4(P1,P2)):-write('Farmer goes with grass from '),write(P1),write(' to '),write(P2),nl.


travel(state(P1,P1,A,B),move1(P1,P2),state(P2,P2,A,B)):-notequal(P1,P2),not(unsafe(state(P2,P2,A,B))).
travel(state(P1,A,B,C),move2(P1,P2),state(P2,A,B,C)):-notequal(P1,P2),not(unsafe(state(P2,A,B,C))).
travel(state(P1,A,P1,B),move3(P1,P2),state(P2,A,P2,B)):-notequal(P1,P2),not(unsafe(state(P2,A,P2,B))).
travel(state(P1,A,B,P1),move4(P1,P2),state(P2,A,B,P2)):-notequal(P1,P2),not(unsafe(state(P2,A,B,P2))).

write_action_list([]).
write_action_list([H|T]):-write_action(H),write_action_list(T),!.

can(S,S,_,[]).
can(S1,S2,V,[A|L]):-travel(S1,A,T),not(member(T,V)),can(T,S2,[T|V],L).

go:-initial_state(S),goal_state(G),can(S,G,[S],L),write_action_list(L),!.


------------------------------------------------------------------------------------------------------------------------------------


unsafe(state_w(M, C, _)):- M>0, C>M,!.  %on_the_west
unsafe(state_w(M, C, _)):- M<3, M>C.    %on_the_east_3-C >_3-M >0.

move(state_w(M, C, 1), state_w(M1, C, 0),'A Missionary goes alone from west to east'):-
	M>0,  M1 is M-1.

% M>0 means M>=1, unless there is one missionary, this action is not possible

move(state_w(M, C, 1), state_w(M2, C, 0),'Two Missionaries go  from west to east'):-
	M>1, M2 is M-2.

move(state_w(M, C, 1), state_w(M1, C1, 0),'A cannibal and a Missionary go  from west to east'):-
	C>0, M>0, M1 is M-1, C1 is C-1.

move(state_w(M, C, 1), state_w(M, C1, 0),'A cannibal goes  from west to east'):-
	C>0, C1 is C-1.

move(state_w(M, C, 1), state_w(M, C2, 0),'Two Cannibals go  from west to east'):-
	C>1, C2 is C-2.


% Moves from East to West

move(state_w(M, C, 0), state_w(M1, C, 1),'A Missionary goes alone from east to west'):-
	M<3, M1 is M+1.  %3-M>0

move(state_w(M, C, 0), state_w(M2, C, 1),'Two Missionaries go  from east to west'):-
	M<2, M2 is M+2.  %3-M>1

move(state_w(M, C, 0), state_w(M1, C1, 1),'A cannibal and a Missionary go  from east to west'):-
	C<3, M<3, M1 is M+1, C1 is C+1.   %3-M>0, 3-C >0


move(state_w(M, C, 0), state_w(M, C1, 1),'A cannibal goes  from east to west'):-
	C<3, C1 is C+1.  %3-C > 0

move(state_w(M, C, 0), state_w(M, C2, 1),'Two Cannibals go  from east to west'):-
	C<2, C2 is C+2.  %3-C >1.


find_actions_path(GS,[GS|Path],Actions,Actions,[GS|Path]).

find_actions_path(GS,[CS|PathSf],ActionsSf,ActionPlan,FinalPath):-
	CS\=GS,
	move(CS, NS, Action),
	not(unsafe(NS)),
	not(member(NS, PathSf)),
	find_actions_path(GS,[NS, CS|PathSf],[Action|ActionsSf],ActionPlan, FinalPath).

get_actions_path(CS, GS, ActPlan, Path):-
find_actions_path(GS, [CS], [], ActPlan, Path).


solve:-	get_actions_path(state_w(3,3,1), state_w(0,0,0),AP, P),
        reverse(P, P1),
        reverse(AP, AP1),
		write(P1), nl,
        write('Actions '), nl, write('======='), nl,
	    print_list(AP1).

print_list([H|T]):-write(H), nl,print_list(T).
print_list([]).


print_list_in_reverse([H|T]):-print_list_in_reverse(T),write(H), nl.
print_list_in_reverse([]).


------------------------------------------------------------------------------------------------------------------------------------

% Problem 1: Dice roll method
dice_roll(X, Y, Sum) :- 
    (X =:= Y -> Sum is 2 * (X + Y) ; Sum is X + Y).

% Problem 2: Number to word representation
num_to_word(1, one).
num_to_word(2, two).
num_to_word(3, three).
num_to_word(4, four).
num_to_word(N, 'too large') :- N > 4.
num_to_word(N, 'too small') :- N < 1.

% Problem 3: Pirate ship success or failure
pirate_trip(Gold, Pirates, true) :- Gold >= Pirates, Gold + Pirates =< 100.
pirate_trip(Gold, Pirates, false) :- Gold < Pirates; Gold + Pirates > 100.

% Problem 4: Skip multiples of 7 and numbers containing 7
contains_digit_7(N) :- number_chars(N, Chars), member('7', Chars).
print_numbers(50).
print_numbers(N) :- 
    \+ contains_digit_7(N),
    N mod 7 =\= 0, 
    write(N), nl,
    Next is N + 1,
    print_numbers(Next).
print_numbers(N) :- 
    Next is N + 1,
    print_numbers(Next).

% Problem 5: FizzBuzz
fizzbuzz(101).
fizzbuzz(N) :- 
    (N mod 3 =:= 0, N mod 5 =:= 0 -> write('FizzBuzz');
     N mod 3 =:= 0 -> write('Fizz');
     N mod 5 =:= 0 -> write('Buzz');
     write(N)), nl,
    Next is N + 1,
    fizzbuzz(Next).

% Problem 6: Collatz Conjecture
collatz(1) :- write(1), nl.
collatz(N) :- 
    N > 1,
    write(N), nl,
    (N mod 2 =:= 0 -> Next is N // 2 ; Next is N * 3 + 1),
    collatz(Next).

% Problem 7: Least Common Multiple (LCM)
gcd(A, 0, A).
gcd(A, B, GCD) :- B > 0, R is A mod B, gcd(B, R, GCD).
lcm(A, B, LCM) :- gcd(A, B, GCD), LCM is (A * B) // GCD.

% Problem 8: Animal classification
animal(simba).
animal(buchchi).
animal(lucy).

carnivore(simba).
herbivore(buchchi).
omnivore(lucy).

eats(simba, meat).
eats(buchchi, plants).
eats(lucy, meat).
eats(lucy, plants).

% Proof that Simba is an animal
is_animal(X) :- animal(X).

% Problem 9: Crossword representation
word(d, o, g).
word(r, u, n).
word(t, o, p).
word(f, i, v, e).
word(f, o, u, r).
word(l, o, s, t).
word(m, e, s, s).
word(u, n, i, t).
word(b, a, k, e, r).
word(f, o, r, u, m).
word(g, r, e, e, n).
word(s, u, p, e, r).
word(p, r, o, l, o, g).
word(v, a, n, i, s, h).
word(w, o, n, d, e, r).
word(y, e, l, l, o, w).

------------------------------------------------------------------------------------------------------------------------------------------------

can_reach ðŸ¡ª clever,close.
get_on: ðŸ¡ª can_climb.

under ðŸ¡ª in room,in_room, in_room,can_climb.
Close ðŸ¡ª get_on,under | tall

% Clauses:

in_room(bananas).
in_room(chair).
in_room(monkey).
clever(monkey).
can_climb(monkey, chair).
tall(chair).
can_move(monkey, chair, bananas).
can_reach(X, Y):-clever(X),close(X, Y).
get_on(X,Y):- 
	can_climb(X,Y).
under(Y,Z):-
	in_room(X),in_room(Y),
	in_room(Z),can_climb(X,Y,Z).
close(X,Z):-
	get_on(X,Y), under(Y,Z);
	tall(Y).


Output:
% Queries:

 ?- can_reach(A, B).
 A = monkey.
 B = banana.

 ?- can_reach(monkey, banana).
 Yes.
